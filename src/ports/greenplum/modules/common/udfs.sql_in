-- A collection of UDFs essential for PDL Tools
-- These may be required for testing scripts or may be a common folder for UDFs required for PDL Tools in general

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.assert(actual text, expected text, msg text)
  RETURNS boolean AS
$BODY$
BEGIN
   IF NOT actual=expected THEN
      RAISE EXCEPTION 'Failed assertion: %',msg;
   END IF;
   RETURN TRUE;
END
$BODY$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.assert(actual text, expected text)
  RETURNS boolean AS
$BODY$
BEGIN
   PERFORM PDLTOOLS_SCHEMA.assert(actual, expected, '');
   RETURN TRUE;
END
$BODY$ LANGUAGE plpgsql IMMUTABLE;


CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.assert(actual boolean, expected boolean)
  RETURNS boolean AS
$BODY$
BEGIN
   PERFORM PDLTOOLS_SCHEMA.assert( 
               case when actual=True then 'True' else 'False' end, 
               case when expected=True then 'True' else 'False' end, 
               ''
           );
   RETURN TRUE;
END
$BODY$ LANGUAGE plpgsql IMMUTABLE;


CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.pdltools_version()
RETURNS VARCHAR AS
$BODY$
SELECT 'PDLTOOLS_VERSION'::VARCHAR;
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.version()
RETURNS VARCHAR AS
$BODY$
SELECT E'PDL Tools: PDLTOOLS_VERSION\nSUgAR: SUGAR_VERSION'::VARCHAR;
$BODY$ LANGUAGE SQL IMMUTABLE;


CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.assert(actual double precision[], expected double precision[])
  RETURNS boolean AS
$BODY$
  return actual==expected
$BODY$ LANGUAGE plpythonu;


/* Helper function to avoid internal table clashes */ 
CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.__random_str(len integer)
  RETURNS text AS
$BODY$
    SELECT string_agg(a)
    FROM (
        SELECT chr(ascii('a') + (random() * 25)::integer) a
        FROM generate_series(1,$1)
    ) foo
$BODY$
  LANGUAGE sql VOLATILE;

